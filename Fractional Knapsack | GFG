//{ Driver Code Starts
import java.io.*;
import java.lang.*;
import java.util.*;

class Item {
    int value, weight;
    Item(int x, int y){
        this.value = x;
        this.weight = y;
    }
}

class GfG {
    
    public static void main(String[] args) throws IOException{
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		int t = Integer.parseInt(br.readLine().trim());
		while(t-->0){
            String inputLine[] = br.readLine().trim().split(" ");
            int n = Integer.parseInt(inputLine[0]);
            int w = Integer.parseInt(inputLine[1]);
            Item[] arr = new Item[n];
            inputLine = br.readLine().trim().split(" ");
            for(int i=0, k=0; i<n; i++){
                arr[i] = new Item(Integer.parseInt(inputLine[k++]), Integer.parseInt(inputLine[k++]));
            }
            System.out.println(String.format("%.2f", new Solution().fractionalKnapsack(w, arr, n)));
        }
    }
}
// } Driver Code Ends


/*
class Item {
    int value, weight;
    Item(int x, int y){
        this.value = x;
        this.weight = y;
    }
}
*/

class Solution
{
    class ProfitComparator implements Comparator<Item> {
        @Override
        public int compare(Item a, Item b) {
            double r1 = (double)a.value/a.weight;
            double r2 = (double)b.value/b.weight;
            if (r1 < r2) 
                return 1;
            else if (r1 > r2)
                return -1;
            else 
                return 0;
        }
    }
    //Function to get the maximum total value in the knapsack.
    double fractionalKnapsack(int W, Item arr[], int n) 
    {
       // Create a custom comparator for sorting the Item in DESC order of the profit
       ProfitComparator pc = new ProfitComparator();
       Arrays.sort(arr, pc);
       double maxP = 0.0;
       int currentWeight = 0;
        for (int i = 0; i < arr.length; i++) {
                // we can add more if  0
                
                if (currentWeight + arr[i].weight <= W) {
                    // Consider the whole, update weight and profit
                    currentWeight += arr[i].weight;
                    maxP += arr[i].value;
                }
                else {
                    // Consider a fraction
                    double fWeight = W - currentWeight;
                    double fValue = (double)arr[i].value/ arr[i].weight;
                    maxP += fValue * fWeight;
                    // Break out as the sack can't hold more weight
                    break;
                }
                
        }
        return maxP;
    }
}
